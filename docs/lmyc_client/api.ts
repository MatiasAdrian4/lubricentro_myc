/* tslint:disable */
/* eslint-disable */
/**
 * Lubricentro M&C
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: matiasadrianpp4@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface Client
 */
export interface Client {
    /**
     * 
     * @type {number}
     * @memberof Client
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Client
     */
    'nombre': string;
    /**
     * 
     * @type {string}
     * @memberof Client
     */
    'direccion'?: string;
    /**
     * 
     * @type {string}
     * @memberof Client
     */
    'localidad'?: string;
    /**
     * 
     * @type {string}
     * @memberof Client
     */
    'codigo_postal'?: string;
    /**
     * 
     * @type {string}
     * @memberof Client
     */
    'telefono'?: string;
    /**
     * 
     * @type {string}
     * @memberof Client
     */
    'cuit'?: string;
    /**
     * 
     * @type {string}
     * @memberof Client
     */
    'email'?: string;
}
/**
 * 
 * @export
 * @interface ExtendedInvoice
 */
export interface ExtendedInvoice {
    /**
     * 
     * @type {number}
     * @memberof ExtendedInvoice
     */
    'codigo'?: number;
    /**
     * 
     * @type {string}
     * @memberof ExtendedInvoice
     */
    'cliente'?: string;
    /**
     * 
     * @type {string}
     * @memberof ExtendedInvoice
     */
    'fecha'?: string;
    /**
     * 
     * @type {string}
     * @memberof ExtendedInvoice
     */
    'resumen_elementos'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ExtendedInvoice
     */
    'esta_pago'?: boolean;
}
/**
 * 
 * @export
 * @interface ExtendedInvoiceAllOf
 */
export interface ExtendedInvoiceAllOf {
    /**
     * 
     * @type {string}
     * @memberof ExtendedInvoiceAllOf
     */
    'resumen_elementos'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ExtendedInvoiceAllOf
     */
    'esta_pago'?: boolean;
}
/**
 * 
 * @export
 * @interface Invoice
 */
export interface Invoice {
    /**
     * 
     * @type {number}
     * @memberof Invoice
     */
    'codigo'?: number;
    /**
     * 
     * @type {string}
     * @memberof Invoice
     */
    'cliente'?: string;
    /**
     * 
     * @type {string}
     * @memberof Invoice
     */
    'fecha'?: string;
}
/**
 * 
 * @export
 * @interface InvoiceItem
 */
export interface InvoiceItem {
    /**
     * 
     * @type {number}
     * @memberof InvoiceItem
     */
    'remito'?: number;
    /**
     * 
     * @type {number}
     * @memberof InvoiceItem
     */
    'producto'?: number;
    /**
     * 
     * @type {number}
     * @memberof InvoiceItem
     */
    'cantidad'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof InvoiceItem
     */
    'pagado'?: boolean;
}
/**
 * 
 * @export
 * @interface InvoiceItemWithProductData
 */
export interface InvoiceItemWithProductData {
    /**
     * 
     * @type {number}
     * @memberof InvoiceItemWithProductData
     */
    'remito'?: number;
    /**
     * 
     * @type {SimplifiedProduct}
     * @memberof InvoiceItemWithProductData
     */
    'producto'?: SimplifiedProduct;
    /**
     * 
     * @type {number}
     * @memberof InvoiceItemWithProductData
     */
    'cantidad'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof InvoiceItemWithProductData
     */
    'pagado'?: boolean;
}
/**
 * 
 * @export
 * @interface InvoiceWithInvoiceItems
 */
export interface InvoiceWithInvoiceItems {
    /**
     * 
     * @type {string}
     * @memberof InvoiceWithInvoiceItems
     */
    'cliente'?: string;
    /**
     * 
     * @type {string}
     * @memberof InvoiceWithInvoiceItems
     */
    'fecha'?: string;
    /**
     * 
     * @type {SimplifiedInvoiceItem}
     * @memberof InvoiceWithInvoiceItems
     */
    'elementos_remito'?: SimplifiedInvoiceItem;
}
/**
 * 
 * @export
 * @interface PaginatedClients
 */
export interface PaginatedClients {
    /**
     * 
     * @type {number}
     * @memberof PaginatedClients
     */
    'count'?: number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedClients
     */
    'next'?: string;
    /**
     * 
     * @type {string}
     * @memberof PaginatedClients
     */
    'previous'?: string;
    /**
     * 
     * @type {Array<Client>}
     * @memberof PaginatedClients
     */
    'results'?: Array<Client>;
}
/**
 * 
 * @export
 * @interface PaginatedClientsAllOf
 */
export interface PaginatedClientsAllOf {
    /**
     * 
     * @type {Array<Client>}
     * @memberof PaginatedClientsAllOf
     */
    'results'?: Array<Client>;
}
/**
 * 
 * @export
 * @interface PaginatedInvoices
 */
export interface PaginatedInvoices {
    /**
     * 
     * @type {number}
     * @memberof PaginatedInvoices
     */
    'count'?: number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedInvoices
     */
    'next'?: string;
    /**
     * 
     * @type {string}
     * @memberof PaginatedInvoices
     */
    'previous'?: string;
    /**
     * 
     * @type {Array<ExtendedInvoice>}
     * @memberof PaginatedInvoices
     */
    'results'?: Array<ExtendedInvoice>;
}
/**
 * 
 * @export
 * @interface PaginatedInvoicesAllOf
 */
export interface PaginatedInvoicesAllOf {
    /**
     * 
     * @type {Array<ExtendedInvoice>}
     * @memberof PaginatedInvoicesAllOf
     */
    'results'?: Array<ExtendedInvoice>;
}
/**
 * 
 * @export
 * @interface PaginatedProducts
 */
export interface PaginatedProducts {
    /**
     * 
     * @type {number}
     * @memberof PaginatedProducts
     */
    'count'?: number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedProducts
     */
    'next'?: string;
    /**
     * 
     * @type {string}
     * @memberof PaginatedProducts
     */
    'previous'?: string;
    /**
     * 
     * @type {Array<Product>}
     * @memberof PaginatedProducts
     */
    'results'?: Array<Product>;
}
/**
 * 
 * @export
 * @interface PaginatedProductsAllOf
 */
export interface PaginatedProductsAllOf {
    /**
     * 
     * @type {Array<Product>}
     * @memberof PaginatedProductsAllOf
     */
    'results'?: Array<Product>;
}
/**
 * 
 * @export
 * @interface PaginatedSales
 */
export interface PaginatedSales {
    /**
     * 
     * @type {number}
     * @memberof PaginatedSales
     */
    'count'?: number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedSales
     */
    'next'?: string;
    /**
     * 
     * @type {string}
     * @memberof PaginatedSales
     */
    'previous'?: string;
    /**
     * 
     * @type {Array<Sale>}
     * @memberof PaginatedSales
     */
    'results'?: Array<Sale>;
}
/**
 * 
 * @export
 * @interface PaginatedSalesAllOf
 */
export interface PaginatedSalesAllOf {
    /**
     * 
     * @type {Array<Sale>}
     * @memberof PaginatedSalesAllOf
     */
    'results'?: Array<Sale>;
}
/**
 * 
 * @export
 * @interface PaginationItems
 */
export interface PaginationItems {
    /**
     * 
     * @type {number}
     * @memberof PaginationItems
     */
    'count'?: number;
    /**
     * 
     * @type {string}
     * @memberof PaginationItems
     */
    'next'?: string;
    /**
     * 
     * @type {string}
     * @memberof PaginationItems
     */
    'previous'?: string;
}
/**
 * 
 * @export
 * @interface Product
 */
export interface Product {
    /**
     * 
     * @type {number}
     * @memberof Product
     */
    'codigo'?: number;
    /**
     * 
     * @type {number}
     * @memberof Product
     */
    'codigo_en_pantalla'?: number;
    /**
     * 
     * @type {string}
     * @memberof Product
     */
    'detalle'?: string;
    /**
     * 
     * @type {number}
     * @memberof Product
     */
    'stock'?: number;
    /**
     * 
     * @type {number}
     * @memberof Product
     */
    'precio_costo'?: number;
    /**
     * 
     * @type {number}
     * @memberof Product
     */
    'desc1'?: number;
    /**
     * 
     * @type {number}
     * @memberof Product
     */
    'desc2'?: number;
    /**
     * 
     * @type {number}
     * @memberof Product
     */
    'desc3'?: number;
    /**
     * 
     * @type {number}
     * @memberof Product
     */
    'desc4'?: number;
    /**
     * 
     * @type {number}
     * @memberof Product
     */
    'flete'?: number;
    /**
     * 
     * @type {number}
     * @memberof Product
     */
    'ganancia'?: number;
    /**
     * 
     * @type {number}
     * @memberof Product
     */
    'iva'?: number;
    /**
     * 
     * @type {number}
     * @memberof Product
     */
    'agregado_cta_cte'?: number;
    /**
     * 
     * @type {string}
     * @memberof Product
     */
    'categoria'?: string;
}
/**
 * 
 * @export
 * @interface ProductUpdateCost
 */
export interface ProductUpdateCost {
    /**
     * 
     * @type {number}
     * @memberof ProductUpdateCost
     */
    'porcentaje_aumento'?: number;
    /**
     * 
     * @type {Array<number>}
     * @memberof ProductUpdateCost
     */
    'productos'?: Array<number>;
}
/**
 * 
 * @export
 * @interface ProductUpdateCostResult
 */
export interface ProductUpdateCostResult {
    /**
     * 
     * @type {string}
     * @memberof ProductUpdateCostResult
     */
    'resultado'?: string;
}
/**
 * 
 * @export
 * @interface Sale
 */
export interface Sale {
    /**
     * 
     * @type {number}
     * @memberof Sale
     */
    'producto'?: number;
    /**
     * 
     * @type {number}
     * @memberof Sale
     */
    'cantidad'?: number;
    /**
     * 
     * @type {number}
     * @memberof Sale
     */
    'precio'?: number;
    /**
     * 
     * @type {string}
     * @memberof Sale
     */
    'fecha'?: string;
}
/**
 * 
 * @export
 * @interface SalesPerMonth
 */
export interface SalesPerMonth {
    /**
     * 
     * @type {Array<number>}
     * @memberof SalesPerMonth
     */
    'sales_per_month'?: Array<number>;
}
/**
 * 
 * @export
 * @interface SalesPerYear
 */
export interface SalesPerYear {
    /**
     * 
     * @type {Array<number>}
     * @memberof SalesPerYear
     */
    'sales_per_year'?: Array<number>;
}
/**
 * 
 * @export
 * @interface SimplifiedInvoiceItem
 */
export interface SimplifiedInvoiceItem {
    /**
     * 
     * @type {number}
     * @memberof SimplifiedInvoiceItem
     */
    'producto'?: number;
    /**
     * 
     * @type {number}
     * @memberof SimplifiedInvoiceItem
     */
    'cantidad'?: number;
}
/**
 * 
 * @export
 * @interface SimplifiedProduct
 */
export interface SimplifiedProduct {
    /**
     * 
     * @type {string}
     * @memberof SimplifiedProduct
     */
    'codigo'?: string;
    /**
     * 
     * @type {string}
     * @memberof SimplifiedProduct
     */
    'detalle'?: string;
    /**
     * 
     * @type {number}
     * @memberof SimplifiedProduct
     */
    'precio_venta_cta_cte'?: number;
}
/**
 * 
 * @export
 * @interface UpdateInvoiceItem
 */
export interface UpdateInvoiceItem {
    /**
     * 
     * @type {number}
     * @memberof UpdateInvoiceItem
     */
    'cantidad'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof UpdateInvoiceItem
     */
    'pagado'?: boolean;
}
/**
 * 
 * @export
 * @interface User
 */
export interface User {
    /**
     * 
     * @type {number}
     * @memberof User
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'username'?: string;
}
/**
 * 
 * @export
 * @interface UserCredentials
 */
export interface UserCredentials {
    /**
     * 
     * @type {string}
     * @memberof UserCredentials
     */
    'username'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserCredentials
     */
    'password'?: string;
}

/**
 * ClientsApi - axios parameter creator
 * @export
 */
export const ClientsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get client
         * @param {number} clienteId Client id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clientesClienteIdGet: async (clienteId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'clienteId' is not null or undefined
            assertParamExists('clientesClienteIdGet', 'clienteId', clienteId)
            const localVarPath = `/clientes/{cliente_id}/`
                .replace(`{${"cliente_id"}}`, encodeURIComponent(String(clienteId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update client
         * @param {number} clienteId Client id
         * @param {Client} client Client data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clientesClienteIdPatch: async (clienteId: number, client: Client, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'clienteId' is not null or undefined
            assertParamExists('clientesClienteIdPatch', 'clienteId', clienteId)
            // verify required parameter 'client' is not null or undefined
            assertParamExists('clientesClienteIdPatch', 'client', client)
            const localVarPath = `/clientes/{cliente_id}/`
                .replace(`{${"cliente_id"}}`, encodeURIComponent(String(clienteId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(client, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all clients or filter them by name
         * @param {number} [page] Desired page
         * @param {string} [nombre] Client\&#39;s name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clientesGet: async (page?: number, nombre?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/clientes/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (nombre !== undefined) {
                localVarQueryParameter['nombre'] = nombre;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create new client
         * @param {Client} client Required client data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clientesPost: async (client: Client, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'client' is not null or undefined
            assertParamExists('clientesPost', 'client', client)
            const localVarPath = `/clientes/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(client, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ClientsApi - functional programming interface
 * @export
 */
export const ClientsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ClientsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get client
         * @param {number} clienteId Client id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async clientesClienteIdGet(clienteId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Client>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.clientesClienteIdGet(clienteId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update client
         * @param {number} clienteId Client id
         * @param {Client} client Client data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async clientesClienteIdPatch(clienteId: number, client: Client, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.clientesClienteIdPatch(clienteId, client, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get all clients or filter them by name
         * @param {number} [page] Desired page
         * @param {string} [nombre] Client\&#39;s name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async clientesGet(page?: number, nombre?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedClients>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.clientesGet(page, nombre, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create new client
         * @param {Client} client Required client data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async clientesPost(client: Client, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.clientesPost(client, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ClientsApi - factory interface
 * @export
 */
export const ClientsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ClientsApiFp(configuration)
    return {
        /**
         * 
         * @summary Get client
         * @param {number} clienteId Client id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clientesClienteIdGet(clienteId: number, options?: any): AxiosPromise<Client> {
            return localVarFp.clientesClienteIdGet(clienteId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update client
         * @param {number} clienteId Client id
         * @param {Client} client Client data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clientesClienteIdPatch(clienteId: number, client: Client, options?: any): AxiosPromise<void> {
            return localVarFp.clientesClienteIdPatch(clienteId, client, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all clients or filter them by name
         * @param {number} [page] Desired page
         * @param {string} [nombre] Client\&#39;s name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clientesGet(page?: number, nombre?: string, options?: any): AxiosPromise<PaginatedClients> {
            return localVarFp.clientesGet(page, nombre, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create new client
         * @param {Client} client Required client data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clientesPost(client: Client, options?: any): AxiosPromise<void> {
            return localVarFp.clientesPost(client, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ClientsApi - object-oriented interface
 * @export
 * @class ClientsApi
 * @extends {BaseAPI}
 */
export class ClientsApi extends BaseAPI {
    /**
     * 
     * @summary Get client
     * @param {number} clienteId Client id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApi
     */
    public clientesClienteIdGet(clienteId: number, options?: AxiosRequestConfig) {
        return ClientsApiFp(this.configuration).clientesClienteIdGet(clienteId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update client
     * @param {number} clienteId Client id
     * @param {Client} client Client data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApi
     */
    public clientesClienteIdPatch(clienteId: number, client: Client, options?: AxiosRequestConfig) {
        return ClientsApiFp(this.configuration).clientesClienteIdPatch(clienteId, client, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all clients or filter them by name
     * @param {number} [page] Desired page
     * @param {string} [nombre] Client\&#39;s name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApi
     */
    public clientesGet(page?: number, nombre?: string, options?: AxiosRequestConfig) {
        return ClientsApiFp(this.configuration).clientesGet(page, nombre, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create new client
     * @param {Client} client Required client data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApi
     */
    public clientesPost(client: Client, options?: AxiosRequestConfig) {
        return ClientsApiFp(this.configuration).clientesPost(client, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * FileActionsApi - axios parameter creator
 * @export
 */
export const FileActionsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get invoice PDF
         * @param {number} codRemito Invoice id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generarRemitoPdfGet: async (codRemito: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'codRemito' is not null or undefined
            assertParamExists('generarRemitoPdfGet', 'codRemito', codRemito)
            const localVarPath = `/generar_remito_pdf`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            if (codRemito !== undefined) {
                localVarQueryParameter['cod_remito'] = codRemito;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a PDF containing the products stock for a given category
         * @param {string} categoria Category
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generarStockPdfGet: async (categoria: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'categoria' is not null or undefined
            assertParamExists('generarStockPdfGet', 'categoria', categoria)
            const localVarPath = `/generar_stock_pdf`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            if (categoria !== undefined) {
                localVarQueryParameter['categoria'] = categoria;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FileActionsApi - functional programming interface
 * @export
 */
export const FileActionsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FileActionsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get invoice PDF
         * @param {number} codRemito Invoice id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async generarRemitoPdfGet(codRemito: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.generarRemitoPdfGet(codRemito, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get a PDF containing the products stock for a given category
         * @param {string} categoria Category
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async generarStockPdfGet(categoria: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.generarStockPdfGet(categoria, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * FileActionsApi - factory interface
 * @export
 */
export const FileActionsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FileActionsApiFp(configuration)
    return {
        /**
         * 
         * @summary Get invoice PDF
         * @param {number} codRemito Invoice id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generarRemitoPdfGet(codRemito: number, options?: any): AxiosPromise<void> {
            return localVarFp.generarRemitoPdfGet(codRemito, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a PDF containing the products stock for a given category
         * @param {string} categoria Category
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generarStockPdfGet(categoria: string, options?: any): AxiosPromise<void> {
            return localVarFp.generarStockPdfGet(categoria, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FileActionsApi - object-oriented interface
 * @export
 * @class FileActionsApi
 * @extends {BaseAPI}
 */
export class FileActionsApi extends BaseAPI {
    /**
     * 
     * @summary Get invoice PDF
     * @param {number} codRemito Invoice id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileActionsApi
     */
    public generarRemitoPdfGet(codRemito: number, options?: AxiosRequestConfig) {
        return FileActionsApiFp(this.configuration).generarRemitoPdfGet(codRemito, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a PDF containing the products stock for a given category
     * @param {string} categoria Category
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileActionsApi
     */
    public generarStockPdfGet(categoria: string, options?: AxiosRequestConfig) {
        return FileActionsApiFp(this.configuration).generarStockPdfGet(categoria, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * InvoiceItemsApi - axios parameter creator
 * @export
 */
export const InvoiceItemsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get invoice item
         * @param {number} elementoRemitoId Invoice item id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        elementosRemitoElementoRemitoIdGet: async (elementoRemitoId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'elementoRemitoId' is not null or undefined
            assertParamExists('elementosRemitoElementoRemitoIdGet', 'elementoRemitoId', elementoRemitoId)
            const localVarPath = `/elementos_remito/{elemento_remito_id}/`
                .replace(`{${"elemento_remito_id"}}`, encodeURIComponent(String(elementoRemitoId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update invoice item
         * @param {number} elementoRemitoId Invoice item id
         * @param {UpdateInvoiceItem} updateInvoiceItem Invoice item data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        elementosRemitoElementoRemitoIdPatch: async (elementoRemitoId: number, updateInvoiceItem: UpdateInvoiceItem, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'elementoRemitoId' is not null or undefined
            assertParamExists('elementosRemitoElementoRemitoIdPatch', 'elementoRemitoId', elementoRemitoId)
            // verify required parameter 'updateInvoiceItem' is not null or undefined
            assertParamExists('elementosRemitoElementoRemitoIdPatch', 'updateInvoiceItem', updateInvoiceItem)
            const localVarPath = `/elementos_remito/{elemento_remito_id}/`
                .replace(`{${"elemento_remito_id"}}`, encodeURIComponent(String(elementoRemitoId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateInvoiceItem, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all invoice items or filter them by paid and/or client\'s code
         * @param {number} [codigoCliente] Client\&#39;s code
         * @param {boolean} [pago] Paid or not
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        elementosRemitoGet: async (codigoCliente?: number, pago?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/elementos_remito/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            if (codigoCliente !== undefined) {
                localVarQueryParameter['codigo_cliente'] = codigoCliente;
            }

            if (pago !== undefined) {
                localVarQueryParameter['pago'] = pago;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create new invoice item
         * @param {InvoiceItem} invoiceItem Required invoice item data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        elementosRemitoPost: async (invoiceItem: InvoiceItem, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'invoiceItem' is not null or undefined
            assertParamExists('elementosRemitoPost', 'invoiceItem', invoiceItem)
            const localVarPath = `/elementos_remito/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(invoiceItem, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * InvoiceItemsApi - functional programming interface
 * @export
 */
export const InvoiceItemsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = InvoiceItemsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get invoice item
         * @param {number} elementoRemitoId Invoice item id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async elementosRemitoElementoRemitoIdGet(elementoRemitoId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InvoiceItemWithProductData>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.elementosRemitoElementoRemitoIdGet(elementoRemitoId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update invoice item
         * @param {number} elementoRemitoId Invoice item id
         * @param {UpdateInvoiceItem} updateInvoiceItem Invoice item data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async elementosRemitoElementoRemitoIdPatch(elementoRemitoId: number, updateInvoiceItem: UpdateInvoiceItem, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.elementosRemitoElementoRemitoIdPatch(elementoRemitoId, updateInvoiceItem, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get all invoice items or filter them by paid and/or client\'s code
         * @param {number} [codigoCliente] Client\&#39;s code
         * @param {boolean} [pago] Paid or not
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async elementosRemitoGet(codigoCliente?: number, pago?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<InvoiceItemWithProductData>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.elementosRemitoGet(codigoCliente, pago, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create new invoice item
         * @param {InvoiceItem} invoiceItem Required invoice item data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async elementosRemitoPost(invoiceItem: InvoiceItem, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.elementosRemitoPost(invoiceItem, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * InvoiceItemsApi - factory interface
 * @export
 */
export const InvoiceItemsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = InvoiceItemsApiFp(configuration)
    return {
        /**
         * 
         * @summary Get invoice item
         * @param {number} elementoRemitoId Invoice item id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        elementosRemitoElementoRemitoIdGet(elementoRemitoId: number, options?: any): AxiosPromise<InvoiceItemWithProductData> {
            return localVarFp.elementosRemitoElementoRemitoIdGet(elementoRemitoId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update invoice item
         * @param {number} elementoRemitoId Invoice item id
         * @param {UpdateInvoiceItem} updateInvoiceItem Invoice item data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        elementosRemitoElementoRemitoIdPatch(elementoRemitoId: number, updateInvoiceItem: UpdateInvoiceItem, options?: any): AxiosPromise<void> {
            return localVarFp.elementosRemitoElementoRemitoIdPatch(elementoRemitoId, updateInvoiceItem, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all invoice items or filter them by paid and/or client\'s code
         * @param {number} [codigoCliente] Client\&#39;s code
         * @param {boolean} [pago] Paid or not
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        elementosRemitoGet(codigoCliente?: number, pago?: boolean, options?: any): AxiosPromise<Array<InvoiceItemWithProductData>> {
            return localVarFp.elementosRemitoGet(codigoCliente, pago, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create new invoice item
         * @param {InvoiceItem} invoiceItem Required invoice item data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        elementosRemitoPost(invoiceItem: InvoiceItem, options?: any): AxiosPromise<void> {
            return localVarFp.elementosRemitoPost(invoiceItem, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * InvoiceItemsApi - object-oriented interface
 * @export
 * @class InvoiceItemsApi
 * @extends {BaseAPI}
 */
export class InvoiceItemsApi extends BaseAPI {
    /**
     * 
     * @summary Get invoice item
     * @param {number} elementoRemitoId Invoice item id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvoiceItemsApi
     */
    public elementosRemitoElementoRemitoIdGet(elementoRemitoId: number, options?: AxiosRequestConfig) {
        return InvoiceItemsApiFp(this.configuration).elementosRemitoElementoRemitoIdGet(elementoRemitoId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update invoice item
     * @param {number} elementoRemitoId Invoice item id
     * @param {UpdateInvoiceItem} updateInvoiceItem Invoice item data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvoiceItemsApi
     */
    public elementosRemitoElementoRemitoIdPatch(elementoRemitoId: number, updateInvoiceItem: UpdateInvoiceItem, options?: AxiosRequestConfig) {
        return InvoiceItemsApiFp(this.configuration).elementosRemitoElementoRemitoIdPatch(elementoRemitoId, updateInvoiceItem, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all invoice items or filter them by paid and/or client\'s code
     * @param {number} [codigoCliente] Client\&#39;s code
     * @param {boolean} [pago] Paid or not
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvoiceItemsApi
     */
    public elementosRemitoGet(codigoCliente?: number, pago?: boolean, options?: AxiosRequestConfig) {
        return InvoiceItemsApiFp(this.configuration).elementosRemitoGet(codigoCliente, pago, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create new invoice item
     * @param {InvoiceItem} invoiceItem Required invoice item data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvoiceItemsApi
     */
    public elementosRemitoPost(invoiceItem: InvoiceItem, options?: AxiosRequestConfig) {
        return InvoiceItemsApiFp(this.configuration).elementosRemitoPost(invoiceItem, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * InvoicesApi - axios parameter creator
 * @export
 */
export const InvoicesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get all invoices or filter them by client\'s name
         * @param {number} [page] Desired page
         * @param {string} [nombre] Client\&#39;s name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        remitosGet: async (page?: number, nombre?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/remitos/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (nombre !== undefined) {
                localVarQueryParameter['nombre'] = nombre;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create new invoice
         * @param {InvoiceWithInvoiceItems} invoiceWithInvoiceItems Required invoice data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        remitosPost: async (invoiceWithInvoiceItems: InvoiceWithInvoiceItems, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'invoiceWithInvoiceItems' is not null or undefined
            assertParamExists('remitosPost', 'invoiceWithInvoiceItems', invoiceWithInvoiceItems)
            const localVarPath = `/remitos/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(invoiceWithInvoiceItems, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete invoice
         * @param {number} remitoId Invoice id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        remitosRemitoIdDelete: async (remitoId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'remitoId' is not null or undefined
            assertParamExists('remitosRemitoIdDelete', 'remitoId', remitoId)
            const localVarPath = `/remitos/{remito_id}/`
                .replace(`{${"remito_id"}}`, encodeURIComponent(String(remitoId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get invoice
         * @param {number} remitoId Invoice id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        remitosRemitoIdGet: async (remitoId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'remitoId' is not null or undefined
            assertParamExists('remitosRemitoIdGet', 'remitoId', remitoId)
            const localVarPath = `/remitos/{remito_id}/`
                .replace(`{${"remito_id"}}`, encodeURIComponent(String(remitoId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * InvoicesApi - functional programming interface
 * @export
 */
export const InvoicesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = InvoicesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get all invoices or filter them by client\'s name
         * @param {number} [page] Desired page
         * @param {string} [nombre] Client\&#39;s name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async remitosGet(page?: number, nombre?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PaginatedInvoices>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.remitosGet(page, nombre, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create new invoice
         * @param {InvoiceWithInvoiceItems} invoiceWithInvoiceItems Required invoice data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async remitosPost(invoiceWithInvoiceItems: InvoiceWithInvoiceItems, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.remitosPost(invoiceWithInvoiceItems, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete invoice
         * @param {number} remitoId Invoice id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async remitosRemitoIdDelete(remitoId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.remitosRemitoIdDelete(remitoId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get invoice
         * @param {number} remitoId Invoice id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async remitosRemitoIdGet(remitoId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExtendedInvoice>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.remitosRemitoIdGet(remitoId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * InvoicesApi - factory interface
 * @export
 */
export const InvoicesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = InvoicesApiFp(configuration)
    return {
        /**
         * 
         * @summary Get all invoices or filter them by client\'s name
         * @param {number} [page] Desired page
         * @param {string} [nombre] Client\&#39;s name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        remitosGet(page?: number, nombre?: string, options?: any): AxiosPromise<Array<PaginatedInvoices>> {
            return localVarFp.remitosGet(page, nombre, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create new invoice
         * @param {InvoiceWithInvoiceItems} invoiceWithInvoiceItems Required invoice data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        remitosPost(invoiceWithInvoiceItems: InvoiceWithInvoiceItems, options?: any): AxiosPromise<void> {
            return localVarFp.remitosPost(invoiceWithInvoiceItems, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete invoice
         * @param {number} remitoId Invoice id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        remitosRemitoIdDelete(remitoId: number, options?: any): AxiosPromise<void> {
            return localVarFp.remitosRemitoIdDelete(remitoId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get invoice
         * @param {number} remitoId Invoice id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        remitosRemitoIdGet(remitoId: number, options?: any): AxiosPromise<ExtendedInvoice> {
            return localVarFp.remitosRemitoIdGet(remitoId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * InvoicesApi - object-oriented interface
 * @export
 * @class InvoicesApi
 * @extends {BaseAPI}
 */
export class InvoicesApi extends BaseAPI {
    /**
     * 
     * @summary Get all invoices or filter them by client\'s name
     * @param {number} [page] Desired page
     * @param {string} [nombre] Client\&#39;s name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvoicesApi
     */
    public remitosGet(page?: number, nombre?: string, options?: AxiosRequestConfig) {
        return InvoicesApiFp(this.configuration).remitosGet(page, nombre, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create new invoice
     * @param {InvoiceWithInvoiceItems} invoiceWithInvoiceItems Required invoice data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvoicesApi
     */
    public remitosPost(invoiceWithInvoiceItems: InvoiceWithInvoiceItems, options?: AxiosRequestConfig) {
        return InvoicesApiFp(this.configuration).remitosPost(invoiceWithInvoiceItems, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete invoice
     * @param {number} remitoId Invoice id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvoicesApi
     */
    public remitosRemitoIdDelete(remitoId: number, options?: AxiosRequestConfig) {
        return InvoicesApiFp(this.configuration).remitosRemitoIdDelete(remitoId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get invoice
     * @param {number} remitoId Invoice id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvoicesApi
     */
    public remitosRemitoIdGet(remitoId: number, options?: AxiosRequestConfig) {
        return InvoicesApiFp(this.configuration).remitosRemitoIdGet(remitoId, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ProductsApi - axios parameter creator
 * @export
 */
export const ProductsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Update products cost price
         * @param {ProductUpdateCost} productUpdateCost Payload containing the products to update and the cost increase percentage
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productoAumentoMasivoPrecioCostoPost: async (productUpdateCost: ProductUpdateCost, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'productUpdateCost' is not null or undefined
            assertParamExists('productoAumentoMasivoPrecioCostoPost', 'productUpdateCost', productUpdateCost)
            const localVarPath = `/producto/aumento_masivo_precio_costo`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(productUpdateCost, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all products or filter them by detail or category
         * @param {number} [page] Desired page
         * @param {string} [detalle] Product\&#39;s detail
         * @param {string} [categoria] Product\&#39;s category
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productosGet: async (page?: number, detalle?: string, categoria?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/productos/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (detalle !== undefined) {
                localVarQueryParameter['detalle'] = detalle;
            }

            if (categoria !== undefined) {
                localVarQueryParameter['categoria'] = categoria;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create new product
         * @param {Product} product Required product data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productosPost: async (product: Product, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'product' is not null or undefined
            assertParamExists('productosPost', 'product', product)
            const localVarPath = `/productos/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(product, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Product
         * @param {number} productoId Product id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productosProductoIdGet: async (productoId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'productoId' is not null or undefined
            assertParamExists('productosProductoIdGet', 'productoId', productoId)
            const localVarPath = `/productos/{producto_id}/`
                .replace(`{${"producto_id"}}`, encodeURIComponent(String(productoId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Product
         * @param {number} productoId Product id
         * @param {Product} product Product data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productosProductoIdPatch: async (productoId: number, product: Product, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'productoId' is not null or undefined
            assertParamExists('productosProductoIdPatch', 'productoId', productoId)
            // verify required parameter 'product' is not null or undefined
            assertParamExists('productosProductoIdPatch', 'product', product)
            const localVarPath = `/productos/{producto_id}/`
                .replace(`{${"producto_id"}}`, encodeURIComponent(String(productoId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(product, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductsApi - functional programming interface
 * @export
 */
export const ProductsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProductsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Update products cost price
         * @param {ProductUpdateCost} productUpdateCost Payload containing the products to update and the cost increase percentage
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productoAumentoMasivoPrecioCostoPost(productUpdateCost: ProductUpdateCost, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductUpdateCostResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productoAumentoMasivoPrecioCostoPost(productUpdateCost, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get all products or filter them by detail or category
         * @param {number} [page] Desired page
         * @param {string} [detalle] Product\&#39;s detail
         * @param {string} [categoria] Product\&#39;s category
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productosGet(page?: number, detalle?: string, categoria?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedProducts>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productosGet(page, detalle, categoria, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create new product
         * @param {Product} product Required product data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productosPost(product: Product, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productosPost(product, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Product
         * @param {number} productoId Product id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productosProductoIdGet(productoId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Product>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productosProductoIdGet(productoId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update Product
         * @param {number} productoId Product id
         * @param {Product} product Product data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productosProductoIdPatch(productoId: number, product: Product, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productosProductoIdPatch(productoId, product, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProductsApi - factory interface
 * @export
 */
export const ProductsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProductsApiFp(configuration)
    return {
        /**
         * 
         * @summary Update products cost price
         * @param {ProductUpdateCost} productUpdateCost Payload containing the products to update and the cost increase percentage
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productoAumentoMasivoPrecioCostoPost(productUpdateCost: ProductUpdateCost, options?: any): AxiosPromise<ProductUpdateCostResult> {
            return localVarFp.productoAumentoMasivoPrecioCostoPost(productUpdateCost, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all products or filter them by detail or category
         * @param {number} [page] Desired page
         * @param {string} [detalle] Product\&#39;s detail
         * @param {string} [categoria] Product\&#39;s category
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productosGet(page?: number, detalle?: string, categoria?: string, options?: any): AxiosPromise<PaginatedProducts> {
            return localVarFp.productosGet(page, detalle, categoria, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create new product
         * @param {Product} product Required product data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productosPost(product: Product, options?: any): AxiosPromise<void> {
            return localVarFp.productosPost(product, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Product
         * @param {number} productoId Product id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productosProductoIdGet(productoId: number, options?: any): AxiosPromise<Product> {
            return localVarFp.productosProductoIdGet(productoId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Product
         * @param {number} productoId Product id
         * @param {Product} product Product data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productosProductoIdPatch(productoId: number, product: Product, options?: any): AxiosPromise<void> {
            return localVarFp.productosProductoIdPatch(productoId, product, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProductsApi - object-oriented interface
 * @export
 * @class ProductsApi
 * @extends {BaseAPI}
 */
export class ProductsApi extends BaseAPI {
    /**
     * 
     * @summary Update products cost price
     * @param {ProductUpdateCost} productUpdateCost Payload containing the products to update and the cost increase percentage
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public productoAumentoMasivoPrecioCostoPost(productUpdateCost: ProductUpdateCost, options?: AxiosRequestConfig) {
        return ProductsApiFp(this.configuration).productoAumentoMasivoPrecioCostoPost(productUpdateCost, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all products or filter them by detail or category
     * @param {number} [page] Desired page
     * @param {string} [detalle] Product\&#39;s detail
     * @param {string} [categoria] Product\&#39;s category
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public productosGet(page?: number, detalle?: string, categoria?: string, options?: AxiosRequestConfig) {
        return ProductsApiFp(this.configuration).productosGet(page, detalle, categoria, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create new product
     * @param {Product} product Required product data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public productosPost(product: Product, options?: AxiosRequestConfig) {
        return ProductsApiFp(this.configuration).productosPost(product, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Product
     * @param {number} productoId Product id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public productosProductoIdGet(productoId: number, options?: AxiosRequestConfig) {
        return ProductsApiFp(this.configuration).productosProductoIdGet(productoId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Product
     * @param {number} productoId Product id
     * @param {Product} product Product data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public productosProductoIdPatch(productoId: number, product: Product, options?: AxiosRequestConfig) {
        return ProductsApiFp(this.configuration).productosProductoIdPatch(productoId, product, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * SalesApi - axios parameter creator
 * @export
 */
export const SalesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get all sales
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ventasGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/ventas/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create new sale
         * @param {string} [updateStock] Update stock
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ventasPost: async (updateStock?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/ventas/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            if (updateStock !== undefined) {
                localVarQueryParameter['update_stock'] = updateStock;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Sale
         * @param {number} ventaId Sale id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ventasVentaIdGet: async (ventaId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ventaId' is not null or undefined
            assertParamExists('ventasVentaIdGet', 'ventaId', ventaId)
            const localVarPath = `/ventas/{venta_id}`
                .replace(`{${"venta_id"}}`, encodeURIComponent(String(ventaId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update sale
         * @param {number} ventaId Sale id
         * @param {Sale} sale Sale data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ventasVentaIdPatch: async (ventaId: number, sale: Sale, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ventaId' is not null or undefined
            assertParamExists('ventasVentaIdPatch', 'ventaId', ventaId)
            // verify required parameter 'sale' is not null or undefined
            assertParamExists('ventasVentaIdPatch', 'sale', sale)
            const localVarPath = `/ventas/{venta_id}`
                .replace(`{${"venta_id"}}`, encodeURIComponent(String(ventaId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(sale, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get sales in a given year
         * @param {string} year Year
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ventasVentasPorAnioGet: async (year: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'year' is not null or undefined
            assertParamExists('ventasVentasPorAnioGet', 'year', year)
            const localVarPath = `/ventas/ventas_por_anio`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            if (year !== undefined) {
                localVarQueryParameter['year'] = year;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get sales in a given month/year
         * @param {string} month Month
         * @param {string} year Year
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ventasVentasPorMesGet: async (month: string, year: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'month' is not null or undefined
            assertParamExists('ventasVentasPorMesGet', 'month', month)
            // verify required parameter 'year' is not null or undefined
            assertParamExists('ventasVentasPorMesGet', 'year', year)
            const localVarPath = `/ventas/ventas_por_mes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            if (month !== undefined) {
                localVarQueryParameter['month'] = month;
            }

            if (year !== undefined) {
                localVarQueryParameter['year'] = year;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SalesApi - functional programming interface
 * @export
 */
export const SalesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SalesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get all sales
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ventasGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Sale>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ventasGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create new sale
         * @param {string} [updateStock] Update stock
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ventasPost(updateStock?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ventasPost(updateStock, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Sale
         * @param {number} ventaId Sale id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ventasVentaIdGet(ventaId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Sale>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ventasVentaIdGet(ventaId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update sale
         * @param {number} ventaId Sale id
         * @param {Sale} sale Sale data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ventasVentaIdPatch(ventaId: number, sale: Sale, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ventasVentaIdPatch(ventaId, sale, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get sales in a given year
         * @param {string} year Year
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ventasVentasPorAnioGet(year: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SalesPerYear>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ventasVentasPorAnioGet(year, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get sales in a given month/year
         * @param {string} month Month
         * @param {string} year Year
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ventasVentasPorMesGet(month: string, year: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SalesPerMonth>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ventasVentasPorMesGet(month, year, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SalesApi - factory interface
 * @export
 */
export const SalesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SalesApiFp(configuration)
    return {
        /**
         * 
         * @summary Get all sales
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ventasGet(options?: any): AxiosPromise<Array<Sale>> {
            return localVarFp.ventasGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create new sale
         * @param {string} [updateStock] Update stock
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ventasPost(updateStock?: string, options?: any): AxiosPromise<void> {
            return localVarFp.ventasPost(updateStock, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Sale
         * @param {number} ventaId Sale id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ventasVentaIdGet(ventaId: number, options?: any): AxiosPromise<Sale> {
            return localVarFp.ventasVentaIdGet(ventaId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update sale
         * @param {number} ventaId Sale id
         * @param {Sale} sale Sale data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ventasVentaIdPatch(ventaId: number, sale: Sale, options?: any): AxiosPromise<void> {
            return localVarFp.ventasVentaIdPatch(ventaId, sale, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get sales in a given year
         * @param {string} year Year
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ventasVentasPorAnioGet(year: string, options?: any): AxiosPromise<SalesPerYear> {
            return localVarFp.ventasVentasPorAnioGet(year, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get sales in a given month/year
         * @param {string} month Month
         * @param {string} year Year
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ventasVentasPorMesGet(month: string, year: string, options?: any): AxiosPromise<SalesPerMonth> {
            return localVarFp.ventasVentasPorMesGet(month, year, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SalesApi - object-oriented interface
 * @export
 * @class SalesApi
 * @extends {BaseAPI}
 */
export class SalesApi extends BaseAPI {
    /**
     * 
     * @summary Get all sales
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalesApi
     */
    public ventasGet(options?: AxiosRequestConfig) {
        return SalesApiFp(this.configuration).ventasGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create new sale
     * @param {string} [updateStock] Update stock
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalesApi
     */
    public ventasPost(updateStock?: string, options?: AxiosRequestConfig) {
        return SalesApiFp(this.configuration).ventasPost(updateStock, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Sale
     * @param {number} ventaId Sale id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalesApi
     */
    public ventasVentaIdGet(ventaId: number, options?: AxiosRequestConfig) {
        return SalesApiFp(this.configuration).ventasVentaIdGet(ventaId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update sale
     * @param {number} ventaId Sale id
     * @param {Sale} sale Sale data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalesApi
     */
    public ventasVentaIdPatch(ventaId: number, sale: Sale, options?: AxiosRequestConfig) {
        return SalesApiFp(this.configuration).ventasVentaIdPatch(ventaId, sale, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get sales in a given year
     * @param {string} year Year
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalesApi
     */
    public ventasVentasPorAnioGet(year: string, options?: AxiosRequestConfig) {
        return SalesApiFp(this.configuration).ventasVentasPorAnioGet(year, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get sales in a given month/year
     * @param {string} month Month
     * @param {string} year Year
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalesApi
     */
    public ventasVentasPorMesGet(month: string, year: string, options?: AxiosRequestConfig) {
        return SalesApiFp(this.configuration).ventasVentasPorMesGet(month, year, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UsersApi - axios parameter creator
 * @export
 */
export const UsersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Log in
         * @param {UserCredentials} userCredentials Username and Password
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountLoginPost: async (userCredentials: UserCredentials, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userCredentials' is not null or undefined
            assertParamExists('accountLoginPost', 'userCredentials', userCredentials)
            const localVarPath = `/account/login/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userCredentials, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Log out
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountLogoutPost: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/account/logout/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create new user
         * @param {UserCredentials} userCredentials Username and Password
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountSignupPost: async (userCredentials: UserCredentials, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userCredentials' is not null or undefined
            assertParamExists('accountSignupPost', 'userCredentials', userCredentials)
            const localVarPath = `/account/signup/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userCredentials, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountUserGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/account/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UsersApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Log in
         * @param {UserCredentials} userCredentials Username and Password
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountLoginPost(userCredentials: UserCredentials, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountLoginPost(userCredentials, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Log out
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountLogoutPost(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountLogoutPost(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create new user
         * @param {UserCredentials} userCredentials Username and Password
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountSignupPost(userCredentials: UserCredentials, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountSignupPost(userCredentials, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountUserGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountUserGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UsersApiFp(configuration)
    return {
        /**
         * 
         * @summary Log in
         * @param {UserCredentials} userCredentials Username and Password
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountLoginPost(userCredentials: UserCredentials, options?: any): AxiosPromise<void> {
            return localVarFp.accountLoginPost(userCredentials, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Log out
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountLogoutPost(options?: any): AxiosPromise<void> {
            return localVarFp.accountLogoutPost(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create new user
         * @param {UserCredentials} userCredentials Username and Password
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountSignupPost(userCredentials: UserCredentials, options?: any): AxiosPromise<void> {
            return localVarFp.accountSignupPost(userCredentials, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountUserGet(options?: any): AxiosPromise<User> {
            return localVarFp.accountUserGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI {
    /**
     * 
     * @summary Log in
     * @param {UserCredentials} userCredentials Username and Password
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public accountLoginPost(userCredentials: UserCredentials, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).accountLoginPost(userCredentials, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Log out
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public accountLogoutPost(options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).accountLogoutPost(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create new user
     * @param {UserCredentials} userCredentials Username and Password
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public accountSignupPost(userCredentials: UserCredentials, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).accountSignupPost(userCredentials, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public accountUserGet(options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).accountUserGet(options).then((request) => request(this.axios, this.basePath));
    }
}


