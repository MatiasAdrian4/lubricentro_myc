/* tslint:disable */
/* eslint-disable */
/**
 * Lubricentro M&C
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: matiasadrianpp4@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Client,
    ClientFromJSON,
    ClientToJSON,
    ClientSearchResultList,
    ClientSearchResultListFromJSON,
    ClientSearchResultListToJSON,
    Product,
    ProductFromJSON,
    ProductToJSON,
} from '../models';

export interface ClientesBuscarGetRequest {
    nombre: string;
}

export interface ClientesClienteIdGetRequest {
    clienteId: number;
}

export interface ClientesClienteIdPatchRequest {
    clienteId: number;
    body: Client;
}

export interface ClientesPostRequest {
    body: Client;
}

/**
 * 
 */
export class ClientsApi extends runtime.BaseAPI {

    /**
     * Get clients searching by name
     */
    async clientesBuscarGetRaw(requestParameters: ClientesBuscarGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ClientSearchResultList>> {
        if (requestParameters.nombre === null || requestParameters.nombre === undefined) {
            throw new runtime.RequiredError('nombre','Required parameter requestParameters.nombre was null or undefined when calling clientesBuscarGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.nombre !== undefined) {
            queryParameters['nombre'] = requestParameters.nombre;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/clientes/buscar`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ClientSearchResultListFromJSON(jsonValue));
    }

    /**
     * Get clients searching by name
     */
    async clientesBuscarGet(requestParameters: ClientesBuscarGetRequest, initOverrides?: RequestInit): Promise<ClientSearchResultList> {
        const response = await this.clientesBuscarGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get client
     */
    async clientesClienteIdGetRaw(requestParameters: ClientesClienteIdGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Client>> {
        if (requestParameters.clienteId === null || requestParameters.clienteId === undefined) {
            throw new runtime.RequiredError('clienteId','Required parameter requestParameters.clienteId was null or undefined when calling clientesClienteIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/clientes/{cliente_id}/`.replace(`{${"cliente_id"}}`, encodeURIComponent(String(requestParameters.clienteId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ClientFromJSON(jsonValue));
    }

    /**
     * Get client
     */
    async clientesClienteIdGet(requestParameters: ClientesClienteIdGetRequest, initOverrides?: RequestInit): Promise<Client> {
        const response = await this.clientesClienteIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update client
     */
    async clientesClienteIdPatchRaw(requestParameters: ClientesClienteIdPatchRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.clienteId === null || requestParameters.clienteId === undefined) {
            throw new runtime.RequiredError('clienteId','Required parameter requestParameters.clienteId was null or undefined when calling clientesClienteIdPatch.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling clientesClienteIdPatch.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/clientes/{cliente_id}/`.replace(`{${"cliente_id"}}`, encodeURIComponent(String(requestParameters.clienteId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: ClientToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update client
     */
    async clientesClienteIdPatch(requestParameters: ClientesClienteIdPatchRequest, initOverrides?: RequestInit): Promise<void> {
        await this.clientesClienteIdPatchRaw(requestParameters, initOverrides);
    }

    /**
     * Get all clients
     */
    async clientesGetRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<Client>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/clientes/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ClientFromJSON));
    }

    /**
     * Get all clients
     */
    async clientesGet(initOverrides?: RequestInit): Promise<Array<Client>> {
        const response = await this.clientesGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Create new client
     */
    async clientesPostRaw(requestParameters: ClientesPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling clientesPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/clientes/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ClientToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create new client
     */
    async clientesPost(requestParameters: ClientesPostRequest, initOverrides?: RequestInit): Promise<void> {
        await this.clientesPostRaw(requestParameters, initOverrides);
    }

    /**
     * Get all products
     */
    async productosGetRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<Product>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/productos/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ProductFromJSON));
    }

    /**
     * Get all products
     */
    async productosGet(initOverrides?: RequestInit): Promise<Array<Product>> {
        const response = await this.productosGetRaw(initOverrides);
        return await response.value();
    }

}
