/* tslint:disable */
/* eslint-disable */
/**
 * Lubricentro M&C
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: matiasadrianpp4@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Product,
    ProductFromJSON,
    ProductToJSON,
    ProductList,
    ProductListFromJSON,
    ProductListToJSON,
    ProductUpdateCost,
    ProductUpdateCostFromJSON,
    ProductUpdateCostToJSON,
    ProductUpdateCostResult,
    ProductUpdateCostResultFromJSON,
    ProductUpdateCostResultToJSON,
} from '../models';

export interface ProductoAumentoMasivoPrecioCostoPostRequest {
    productUpdateCost: ProductUpdateCost;
}

export interface ProductosBuscarPorCategoriaGetRequest {
    categoria: string;
}

export interface ProductosBuscarPorDetalleGetRequest {
    detalle: string;
}

export interface ProductosPostRequest {
    product: Product;
}

export interface ProductosProductoIdGetRequest {
    productoId: number;
}

export interface ProductosProductoIdPatchRequest {
    productoId: number;
    product: Product;
}

/**
 * 
 */
export class ProductsApi extends runtime.BaseAPI {

    /**
     * Update products cost price
     */
    async productoAumentoMasivoPrecioCostoPostRaw(requestParameters: ProductoAumentoMasivoPrecioCostoPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ProductUpdateCostResult>> {
        if (requestParameters.productUpdateCost === null || requestParameters.productUpdateCost === undefined) {
            throw new runtime.RequiredError('productUpdateCost','Required parameter requestParameters.productUpdateCost was null or undefined when calling productoAumentoMasivoPrecioCostoPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/producto/aumento_masivo_precio_costo`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProductUpdateCostToJSON(requestParameters.productUpdateCost),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductUpdateCostResultFromJSON(jsonValue));
    }

    /**
     * Update products cost price
     */
    async productoAumentoMasivoPrecioCostoPost(requestParameters: ProductoAumentoMasivoPrecioCostoPostRequest, initOverrides?: RequestInit): Promise<ProductUpdateCostResult> {
        const response = await this.productoAumentoMasivoPrecioCostoPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Search product by category
     */
    async productosBuscarPorCategoriaGetRaw(requestParameters: ProductosBuscarPorCategoriaGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<ProductList>>> {
        if (requestParameters.categoria === null || requestParameters.categoria === undefined) {
            throw new runtime.RequiredError('categoria','Required parameter requestParameters.categoria was null or undefined when calling productosBuscarPorCategoriaGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.categoria !== undefined) {
            queryParameters['categoria'] = requestParameters.categoria;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/productos/buscar_por_categoria`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ProductListFromJSON));
    }

    /**
     * Search product by category
     */
    async productosBuscarPorCategoriaGet(requestParameters: ProductosBuscarPorCategoriaGetRequest, initOverrides?: RequestInit): Promise<Array<ProductList>> {
        const response = await this.productosBuscarPorCategoriaGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Search product by detail
     */
    async productosBuscarPorDetalleGetRaw(requestParameters: ProductosBuscarPorDetalleGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<ProductList>>> {
        if (requestParameters.detalle === null || requestParameters.detalle === undefined) {
            throw new runtime.RequiredError('detalle','Required parameter requestParameters.detalle was null or undefined when calling productosBuscarPorDetalleGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.detalle !== undefined) {
            queryParameters['detalle'] = requestParameters.detalle;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/productos/buscar_por_detalle`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ProductListFromJSON));
    }

    /**
     * Search product by detail
     */
    async productosBuscarPorDetalleGet(requestParameters: ProductosBuscarPorDetalleGetRequest, initOverrides?: RequestInit): Promise<Array<ProductList>> {
        const response = await this.productosBuscarPorDetalleGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create new product
     */
    async productosPostRaw(requestParameters: ProductosPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.product === null || requestParameters.product === undefined) {
            throw new runtime.RequiredError('product','Required parameter requestParameters.product was null or undefined when calling productosPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/productos/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProductToJSON(requestParameters.product),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create new product
     */
    async productosPost(requestParameters: ProductosPostRequest, initOverrides?: RequestInit): Promise<void> {
        await this.productosPostRaw(requestParameters, initOverrides);
    }

    /**
     * Get Product
     */
    async productosProductoIdGetRaw(requestParameters: ProductosProductoIdGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Product>> {
        if (requestParameters.productoId === null || requestParameters.productoId === undefined) {
            throw new runtime.RequiredError('productoId','Required parameter requestParameters.productoId was null or undefined when calling productosProductoIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/productos/{producto_id}/`.replace(`{${"producto_id"}}`, encodeURIComponent(String(requestParameters.productoId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductFromJSON(jsonValue));
    }

    /**
     * Get Product
     */
    async productosProductoIdGet(requestParameters: ProductosProductoIdGetRequest, initOverrides?: RequestInit): Promise<Product> {
        const response = await this.productosProductoIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update Product
     */
    async productosProductoIdPatchRaw(requestParameters: ProductosProductoIdPatchRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.productoId === null || requestParameters.productoId === undefined) {
            throw new runtime.RequiredError('productoId','Required parameter requestParameters.productoId was null or undefined when calling productosProductoIdPatch.');
        }

        if (requestParameters.product === null || requestParameters.product === undefined) {
            throw new runtime.RequiredError('product','Required parameter requestParameters.product was null or undefined when calling productosProductoIdPatch.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/productos/{producto_id}/`.replace(`{${"producto_id"}}`, encodeURIComponent(String(requestParameters.productoId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: ProductToJSON(requestParameters.product),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update Product
     */
    async productosProductoIdPatch(requestParameters: ProductosProductoIdPatchRequest, initOverrides?: RequestInit): Promise<void> {
        await this.productosProductoIdPatchRaw(requestParameters, initOverrides);
    }

}
