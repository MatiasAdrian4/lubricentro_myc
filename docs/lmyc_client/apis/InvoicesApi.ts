/* tslint:disable */
/* eslint-disable */
/**
 * Lubricentro M&C
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: matiasadrianpp4@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Invoice,
    InvoiceFromJSON,
    InvoiceToJSON,
} from '../models';

export interface RemitoBorrarRemitoGetRequest {
    codigo: string;
}

export interface RemitoPostRequest {
    body: Invoice;
}

export interface RemitoRemitoIdGetRequest {
    remitoId: number;
}

export interface RemitoRemitoIdPatchRequest {
    remitoId: number;
    body: Invoice;
}

/**
 * 
 */
export class InvoicesApi extends runtime.BaseAPI {

    /**
     * Delete invoice
     */
    async remitoBorrarRemitoGetRaw(requestParameters: RemitoBorrarRemitoGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.codigo === null || requestParameters.codigo === undefined) {
            throw new runtime.RequiredError('codigo','Required parameter requestParameters.codigo was null or undefined when calling remitoBorrarRemitoGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.codigo !== undefined) {
            queryParameters['codigo'] = requestParameters.codigo;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/remito/borrar_remito`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete invoice
     */
    async remitoBorrarRemitoGet(requestParameters: RemitoBorrarRemitoGetRequest, initOverrides?: RequestInit): Promise<void> {
        await this.remitoBorrarRemitoGetRaw(requestParameters, initOverrides);
    }

    /**
     * Get all invoices
     */
    async remitoGetRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<Invoice>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/remito/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(InvoiceFromJSON));
    }

    /**
     * Get all invoices
     */
    async remitoGet(initOverrides?: RequestInit): Promise<Array<Invoice>> {
        const response = await this.remitoGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Create new invoice
     */
    async remitoPostRaw(requestParameters: RemitoPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling remitoPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/remito/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InvoiceToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create new invoice
     */
    async remitoPost(requestParameters: RemitoPostRequest, initOverrides?: RequestInit): Promise<void> {
        await this.remitoPostRaw(requestParameters, initOverrides);
    }

    /**
     * Get invoice
     */
    async remitoRemitoIdGetRaw(requestParameters: RemitoRemitoIdGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Invoice>> {
        if (requestParameters.remitoId === null || requestParameters.remitoId === undefined) {
            throw new runtime.RequiredError('remitoId','Required parameter requestParameters.remitoId was null or undefined when calling remitoRemitoIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/remito/{remito_id}/`.replace(`{${"remito_id"}}`, encodeURIComponent(String(requestParameters.remitoId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InvoiceFromJSON(jsonValue));
    }

    /**
     * Get invoice
     */
    async remitoRemitoIdGet(requestParameters: RemitoRemitoIdGetRequest, initOverrides?: RequestInit): Promise<Invoice> {
        const response = await this.remitoRemitoIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update invoice
     */
    async remitoRemitoIdPatchRaw(requestParameters: RemitoRemitoIdPatchRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.remitoId === null || requestParameters.remitoId === undefined) {
            throw new runtime.RequiredError('remitoId','Required parameter requestParameters.remitoId was null or undefined when calling remitoRemitoIdPatch.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling remitoRemitoIdPatch.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/remito/{remito_id}/`.replace(`{${"remito_id"}}`, encodeURIComponent(String(requestParameters.remitoId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: InvoiceToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update invoice
     */
    async remitoRemitoIdPatch(requestParameters: RemitoRemitoIdPatchRequest, initOverrides?: RequestInit): Promise<void> {
        await this.remitoRemitoIdPatchRaw(requestParameters, initOverrides);
    }

}
