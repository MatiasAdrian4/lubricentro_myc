/* tslint:disable */
/* eslint-disable */
/**
 * Lubricentro M&C
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: matiasadrianpp4@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Sale,
    SaleFromJSON,
    SaleToJSON,
    SaleList,
    SaleListFromJSON,
    SaleListToJSON,
    SalesPerMonth,
    SalesPerMonthFromJSON,
    SalesPerMonthToJSON,
    SalesPerYear,
    SalesPerYearFromJSON,
    SalesPerYearToJSON,
} from '../models';

export interface VentasRealizadasGuardarVentaPostRequest {
    saleList: SaleList;
}

export interface VentasRealizadasGuardarVentaYActualizarStockPostRequest {
    saleList: SaleList;
}

export interface VentasRealizadasVentaIdGetRequest {
    ventaId: number;
}

export interface VentasRealizadasVentaIdPatchRequest {
    ventaId: number;
    sale: Sale;
}

export interface VentasRealizadasVentasPorAnioGetRequest {
    year: string;
}

export interface VentasRealizadasVentasPorMesGetRequest {
    month: string;
    year: string;
}

/**
 * 
 */
export class SalesApi extends runtime.BaseAPI {

    /**
     * Get all sakes
     */
    async ventasRealizadasGetRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<Sale>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/ventas_realizadas`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SaleFromJSON));
    }

    /**
     * Get all sakes
     */
    async ventasRealizadasGet(initOverrides?: RequestInit): Promise<Array<Sale>> {
        const response = await this.ventasRealizadasGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Create new sales
     */
    async ventasRealizadasGuardarVentaPostRaw(requestParameters: VentasRealizadasGuardarVentaPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.saleList === null || requestParameters.saleList === undefined) {
            throw new runtime.RequiredError('saleList','Required parameter requestParameters.saleList was null or undefined when calling ventasRealizadasGuardarVentaPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/ventas_realizadas/guardar_venta/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SaleListToJSON(requestParameters.saleList),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create new sales
     */
    async ventasRealizadasGuardarVentaPost(requestParameters: VentasRealizadasGuardarVentaPostRequest, initOverrides?: RequestInit): Promise<void> {
        await this.ventasRealizadasGuardarVentaPostRaw(requestParameters, initOverrides);
    }

    /**
     * Create new sale and update stock
     */
    async ventasRealizadasGuardarVentaYActualizarStockPostRaw(requestParameters: VentasRealizadasGuardarVentaYActualizarStockPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.saleList === null || requestParameters.saleList === undefined) {
            throw new runtime.RequiredError('saleList','Required parameter requestParameters.saleList was null or undefined when calling ventasRealizadasGuardarVentaYActualizarStockPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/ventas_realizadas/guardar_venta_y_actualizar_stock/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SaleListToJSON(requestParameters.saleList),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create new sale and update stock
     */
    async ventasRealizadasGuardarVentaYActualizarStockPost(requestParameters: VentasRealizadasGuardarVentaYActualizarStockPostRequest, initOverrides?: RequestInit): Promise<void> {
        await this.ventasRealizadasGuardarVentaYActualizarStockPostRaw(requestParameters, initOverrides);
    }

    /**
     * Get Sale
     */
    async ventasRealizadasVentaIdGetRaw(requestParameters: VentasRealizadasVentaIdGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Sale>> {
        if (requestParameters.ventaId === null || requestParameters.ventaId === undefined) {
            throw new runtime.RequiredError('ventaId','Required parameter requestParameters.ventaId was null or undefined when calling ventasRealizadasVentaIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/ventas_realizadas/{venta_id}`.replace(`{${"venta_id"}}`, encodeURIComponent(String(requestParameters.ventaId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SaleFromJSON(jsonValue));
    }

    /**
     * Get Sale
     */
    async ventasRealizadasVentaIdGet(requestParameters: VentasRealizadasVentaIdGetRequest, initOverrides?: RequestInit): Promise<Sale> {
        const response = await this.ventasRealizadasVentaIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update sale
     */
    async ventasRealizadasVentaIdPatchRaw(requestParameters: VentasRealizadasVentaIdPatchRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.ventaId === null || requestParameters.ventaId === undefined) {
            throw new runtime.RequiredError('ventaId','Required parameter requestParameters.ventaId was null or undefined when calling ventasRealizadasVentaIdPatch.');
        }

        if (requestParameters.sale === null || requestParameters.sale === undefined) {
            throw new runtime.RequiredError('sale','Required parameter requestParameters.sale was null or undefined when calling ventasRealizadasVentaIdPatch.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/ventas_realizadas/{venta_id}`.replace(`{${"venta_id"}}`, encodeURIComponent(String(requestParameters.ventaId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: SaleToJSON(requestParameters.sale),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update sale
     */
    async ventasRealizadasVentaIdPatch(requestParameters: VentasRealizadasVentaIdPatchRequest, initOverrides?: RequestInit): Promise<void> {
        await this.ventasRealizadasVentaIdPatchRaw(requestParameters, initOverrides);
    }

    /**
     * Get sales in a given year
     */
    async ventasRealizadasVentasPorAnioGetRaw(requestParameters: VentasRealizadasVentasPorAnioGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<SalesPerYear>> {
        if (requestParameters.year === null || requestParameters.year === undefined) {
            throw new runtime.RequiredError('year','Required parameter requestParameters.year was null or undefined when calling ventasRealizadasVentasPorAnioGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.year !== undefined) {
            queryParameters['year'] = requestParameters.year;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/ventas_realizadas/ventas_por_anio`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SalesPerYearFromJSON(jsonValue));
    }

    /**
     * Get sales in a given year
     */
    async ventasRealizadasVentasPorAnioGet(requestParameters: VentasRealizadasVentasPorAnioGetRequest, initOverrides?: RequestInit): Promise<SalesPerYear> {
        const response = await this.ventasRealizadasVentasPorAnioGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get sales in a given month/year
     */
    async ventasRealizadasVentasPorMesGetRaw(requestParameters: VentasRealizadasVentasPorMesGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<SalesPerMonth>> {
        if (requestParameters.month === null || requestParameters.month === undefined) {
            throw new runtime.RequiredError('month','Required parameter requestParameters.month was null or undefined when calling ventasRealizadasVentasPorMesGet.');
        }

        if (requestParameters.year === null || requestParameters.year === undefined) {
            throw new runtime.RequiredError('year','Required parameter requestParameters.year was null or undefined when calling ventasRealizadasVentasPorMesGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.month !== undefined) {
            queryParameters['month'] = requestParameters.month;
        }

        if (requestParameters.year !== undefined) {
            queryParameters['year'] = requestParameters.year;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/ventas_realizadas/ventas_por_mes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SalesPerMonthFromJSON(jsonValue));
    }

    /**
     * Get sales in a given month/year
     */
    async ventasRealizadasVentasPorMesGet(requestParameters: VentasRealizadasVentasPorMesGetRequest, initOverrides?: RequestInit): Promise<SalesPerMonth> {
        const response = await this.ventasRealizadasVentasPorMesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
