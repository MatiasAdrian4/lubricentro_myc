openapi: "3.0.0"

info:
  description: ""
  version: 1.0.0
  title: Lubricentro M&C
  contact:
    email: matiasadrianpp4@gmail.com

servers:
  - url: http://localhost:8000/lubricentro_myc
    description: Local Development

tags:
  - name: Users
  - name: Clients
  - name: File Actions
  - name: Invoices
  - name: Invoice Items
  - name: Products
  - name: Sales

paths:
  /account/signup/:
    post:
      security: []
      tags:
        - Users
      summary: "Create new user"
      requestBody:
        description: "Username and Password"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserCredentials"
      responses:
        200:
          description: "User created"
        400:
          description: "User already exists"
  /account/user:
    get:
      tags:
        - Users
      summary: "Get user"
      responses:
        200:
          description: "User data"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
  /account/login/:
    post:
      security: []
      tags:
        - Users
      summary: "Log in"
      requestBody:
        description: "Username and Password"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserCredentials"
      responses:
        200:
          description: "Login successful"
        403:
          description: "Incorrect User or Password"
  /account/logout/:
    post:
      tags:
        - Users
      summary: "Log out"
      responses:
        200:
          description: "Logout successful"
  /clientes/:
    get:
      tags:
        - Clients
      summary: "Get all clients or filter them by name"
      parameters:
        - in: query
          name: page
          description: "Desired page"
          required: false
          schema:
            type: integer
        - in: query
          name: page_size
          description: "Page size"
          required: false
          schema:
            type: integer
        - in: query
          name: nombre
          description: "Client's name"
          required: false
          schema:
            type: string
        - in: query
          name: query
          description: "Id or name of the client"
          required: false
          schema:
            type: string
      responses:
        200:
          description: "Paginated clients list"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginatedClients"
    post:
      tags:
        - Clients
      summary: "Create new client"
      requestBody:
        description: "Required client data"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Client"
      responses:
        201:
          description: "Client created"
        400:
          description: "Client already exists"
  /clientes/{cliente_id}/:
    get:
      tags:
        - Clients
      summary: "Get client"
      parameters:
        - name: cliente_id
          in: path
          description: "Client id"
          required: true
          schema:
            type: integer
      responses:
        200:
          description: "Succesfully get client"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExtendedClient"
        404:
          description: "Client not found"
    patch:
      tags:
        - Clients
      summary: "Update client"
      parameters:
        - in: path
          name: cliente_id
          description: "Client id"
          required: true
          schema:
            type: integer
      requestBody:
        description: "Client data"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Client"
      responses:
        200:
          description: "Client updated"
        404:
          description: "Client not found"
  /generar_stock_pdf:
    get:
      tags:
        - File Actions
      summary: "Get a PDF containing the products stock for a given category"
      parameters:
        - in: query
          name: categoria
          description: "Category"
          required: true
          schema:
            type: string
      responses:
        200:
          description: "PDF containing the products stock"
  /generar_remito_pdf:
    get:
      tags:
        - File Actions
      summary: "Get invoice PDF"
      parameters:
        - in: query
          name: cod_remito
          description: "Invoice id"
          required: true
          schema:
            type: integer
      responses:
        200:
          description: "Invoice PDF"
  /remitos/:
    get:
      tags:
        - Invoices
      summary: "Get all invoices or filter them by client's name"
      parameters:
        - in: query
          name: page
          description: "Desired page"
          required: false
          schema:
            type: integer
        - in: query
          name: page_size
          description: "Page size"
          required: false
          schema:
            type: integer
        - in: query
          name: nombre
          description: "Client's name"
          required: false
          schema:
            type: string
      responses:
        200:
          description: "Paginated invoices list"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PaginatedInvoices"
    post:
      tags:
        - Invoices
      summary: "Create new invoice"
      requestBody:
        description: "Required invoice data"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InvoiceWithInvoiceItems"
      responses:
        201:
          description: "Invoice created"
  /remitos/{remito_id}/:
    get:
      tags:
        - Invoices
      summary: "Get invoice"
      parameters:
        - name: remito_id
          in: path
          description: "Invoice id"
          required: true
          schema:
            type: integer
      responses:
        200:
          description: "Succesfully get invoice"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExtendedInvoice"
        404:
          description: "Invoice not found"
    delete:
      tags:
        - Invoices
      summary: "Delete invoice"
      parameters:
        - in: path
          name: remito_id
          description: "Invoice id"
          required: true
          schema:
            type: integer
      responses:
        204:
          description: "Invoice succesfully deleted"
  /elementos_remito/:
    get:
      tags:
        - Invoice Items
      summary: "Get all invoice items or filter them by paid and/or client's code"
      parameters:
        - in: query
          name: codigo_cliente
          description: "Client's code"
          required: false
          schema:
            type: integer
        - in: query
          name: pago
          description: "Paid or not"
          required: false
          schema:
            type: boolean
      responses:
        200:
          description: "Invoice items list"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/InvoiceItemWithProductData"
    post:
      tags:
        - Invoice Items
      summary: "Create new invoice item"
      requestBody:
        description: "Required invoice item data"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InvoiceItem"
      responses:
        201:
          description: "Invoice item created"
  /elementos_remito/{elemento_remito_id}/:
    get:
      tags:
        - Invoice Items
      summary: "Get invoice item"
      parameters:
        - name: elemento_remito_id
          in: path
          description: "Invoice item id"
          required: true
          schema:
            type: integer
      responses:
        200:
          description: "Succesfully get invoice item"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvoiceItemWithProductData"
        404:
          description: "Invoice item not found"
    patch:
      tags:
        - Invoice Items
      summary: "Update invoice item"
      parameters:
        - in: path
          name: elemento_remito_id
          description: "Invoice item id"
          required: true
          schema:
            type: integer
      requestBody:
        description: "Invoice item data"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateInvoiceItem"
      responses:
        200:
          description: "Invoice item updated"
        404:
          description: "Invoice item not found"
  /productos/:
    get:
      tags:
        - Products
      summary: "Get all products or filter them by code, detail or category"
      parameters:
        - in: query
          name: page
          description: "Desired page"
          required: false
          schema:
            type: integer
        - in: query
          name: page_size
          description: "Page size"
          required: false
          schema:
            type: integer
        - in: query
          name: detalle
          description: "Product's detail"
          required: false
          schema:
            type: string
        - in: query
          name: categoria
          description: "Product's category"
          required: false
          schema:
            type: string
        - in: query
          name: query
          description: "Code, detail or category of the product"
          required: false
          schema:
            type: string
      responses:
        200:
          description: "List containing all the products"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginatedProducts"
    post:
      tags:
        - Products
      summary: "Create new product"
      requestBody:
        description: "Required product data"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Product"
      responses:
        201:
          description: "Product created"
        400:
          description: "Product already exists"
  /productos/{producto_id}/:
    get:
      tags:
        - Products
      summary: "Get Product"
      parameters:
        - name: producto_id
          in: path
          description: "Product id"
          required: true
          schema:
            type: integer
      responses:
        200:
          description: "Succesfully get product"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExtendedProduct"
        404:
          description: "Product not found"
    patch:
      tags:
        - Products
      summary: "Update Product"
      parameters:
        - in: path
          name: producto_id
          description: "Product id"
          required: true
          schema:
            type: integer
      requestBody:
        description: "Product data"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Product"
      responses:
        200:
          description: "Product updated"
        404:
          description: "Product not found"
  /producto/aumento_masivo_precio_costo:
    post:
      tags:
        - Products
      summary: "Update products cost price"
      requestBody:
        description: "Payload containing the products to update and the cost increase percentage"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductUpdateCost"
      responses:
        200:
          description: "Text containing the amount of products succesfully updated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductUpdateCostResult"
  /ventas/:
    get:
      tags:
        - Sales
      summary: "Get all sales or filter them by day, month or year"
      parameters:
        - in: query
          name: page
          description: "Desired page"
          required: false
          schema:
            type: integer
        - in: query
          name: page_size
          description: "Page size"
          required: false
          schema:
            type: integer
        - in: query
          name: dia
          example: "21"
          required: false
          schema:
            type: string
        - in: query
          name: mes
          example: "02"
          required: false
          schema:
            type: string
        - in: query
          name: anio
          example: "2020"
          required: false
          schema:
            type: string
      responses:
        200:
          description: "Paginated sales list"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PaginatedSales"
    post:
      tags:
        - Sales
      summary: "Create new sale"
      parameters:
        - in: query
          name: update_stock
          description: "Update stock"
          required: false
          schema:
            type: string
      requestBody:
        description: "Required sale data"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BasicSale"
      responses:
        201:
          description: "Sale created"
  /ventas/{venta_id}:
    get:
      tags:
        - Sales
      summary: "Get Sale"
      parameters:
        - name: venta_id
          in: path
          description: "Sale id"
          required: true
          schema:
            type: integer
      responses:
        200:
          description: "Succesfully get sale"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Sale"
        404:
          description: "Sale not found"
    patch:
      tags:
        - Sales
      summary: "Update sale"
      parameters:
        - in: path
          name: venta_id
          description: "Sale id"
          required: true
          schema:
            type: integer
      requestBody:
        description: "Sale data"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Sale"
      responses:
        200:
          description: "Sale updated"
        404:
          description: "Sale not found"
  /ventas/ventas_por_anio:
    get:
      tags:
        - Sales
      summary: "Get sales in a given year"
      parameters:
        - in: query
          name: year
          description: "Year"
          required: true
          schema:
            type: string
      responses:
        200:
          description: "List containing the sales by month in the given year"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SalesPerYear"
  /ventas/ventas_por_mes:
    get:
      tags:
        - Sales
      summary: "Get sales in a given month/year"
      parameters:
        - in: query
          name: month
          description: "Month"
          required: true
          schema:
            type: string
        - in: query
          name: year
          description: "Year"
          required: true
          schema:
            type: string
      responses:
        200:
          description: "List containing the sales by day in the given month"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SalesPerMonth"

components:
  schemas:
    PaginationItems:
      type: object
      properties:
        count:
          type: integer
          example: 1
        next:
          type: string
          example: ".../resource/?page=3"
        previous:
          type: string
          example: ".../resource/?page=1"
    Client:
      type: object
      required:
        - nombre
      properties:
        id:
          type: integer
          example: 1
        nombre:
          type: string
          example: "Matias Peñalba Paz"
        direccion:
          type: string
          example: "Pinto 1248 PB"
        localidad:
          type: string
          example: "Tandil"
        codigo_postal:
          type: string
          example: "7000"
        telefono:
          type: string
          example: "2262569097"
        cuit:
          type: string
          example: "23-37370680-9"
        email:
          type: string
          example: "matiasadrianpp4@gmail.com"
    ExtendedClient:
      allOf:
        - $ref: "#/components/schemas/Client"
        - type: object
          properties:
            lista_remitos:
              type: array
              items:
                $ref: "#/components/schemas/ExtendedInvoice"
            deuda_actual:
              type: number
              example: 1000.0
    PaginatedClients:
      allOf:
        - $ref: "#/components/schemas/PaginationItems"
        - type: object
          properties:
            results:
              type: array
              items:
                $ref: "#/components/schemas/Client"
    Invoice:
      type: object
      properties:
        codigo:
          type: integer
          example: 1
        cliente:
          type: string
          example: Pedro Perez
        fecha:
          type: string
          format: date
          example: "2018-03-20"
    ExtendedInvoice:
      allOf:
        - $ref: "#/components/schemas/Invoice"
        - type: object
          properties:
            resumen_elementos:
              type: string
              example: "1 (producto 1) - 2 uds.; 2 (producto 2) - 5 uds."
            esta_pago:
              type: boolean
    InvoiceWithInvoiceItems:
      type: object
      properties:
        cliente:
          type: string
          example: Pedro Perez
        fecha:
          type: string
          format: date
          example: "2018-03-20"
        elementos_remito:
          $ref: "#/components/schemas/SimplifiedInvoiceItem"
    PaginatedInvoices:
      allOf:
        - $ref: "#/components/schemas/PaginationItems"
        - type: object
          properties:
            results:
              type: array
              items:
                $ref: "#/components/schemas/ExtendedInvoice"
    InvoiceItem:
      type: object
      properties:
        remito:
          type: integer
          example: 1
        producto:
          type: integer
          example: 1
        cantidad:
          type: number
          example: 1.0
        pagado:
          type: boolean
    InvoiceItemWithProductData:
      type: object
      properties:
        remito:
          type: integer
          example: 1
        producto:
          $ref: "#/components/schemas/SimplifiedProduct"
        cantidad:
          type: number
          example: 1.0
        pagado:
          type: boolean
    SimplifiedInvoiceItem:
      type: object
      properties:
        producto:
          type: integer
          example: 1
        cantidad:
          type: number
          example: 1.0
    UpdateInvoiceItem:
      type: object
      properties:
        cantidad:
          type: number
          example: 1.0
        pagado:
          type: boolean
    Product:
      type: object
      properties:
        codigo:
          type: integer
          example: 1
        codigo_en_pantalla:
          type: integer
          example: 1
        detalle:
          type: string
          example: "Product 1"
        stock:
          type: number
          example: 1.0
        precio_costo:
          type: number
          example: 1.0
        desc1:
          type: number
          example: 10.0
        desc2:
          type: number
          example: 5.0
        desc3:
          type: number
          example: 5.0
        desc4:
          type: number
          example: 0.0
        flete:
          type: number
          example: 5.0
        ganancia:
          type: number
          example: 40.0
        iva:
          type: number
          example: 21.0
        agregado_cta_cte:
          type: number
          example: 25.0
        categoria:
          type: string
          example: "Lubricantes"
    SimplifiedProduct:
      type: object
      properties:
        codigo:
          type: string
          example: 1
        detalle:
          type: string
          example: "Product 1"
        precio_venta_cta_cte:
          type: number
          example: 1.0
    BasicProduct:
      type: object
      properties:
        codigo:
          type: string
          example: 1
        detalle:
          type: string
          example: "Product 1"
    ExtendedProduct:
      allOf:
        - $ref: "#/components/schemas/Product"
        - type: object
          properties:
            precio_venta_contado:
              type: number
              example: 10.0
            precio_venta_cta_cte:
              type: number
              example: 10.0
    PaginatedProducts:
      allOf:
        - $ref: "#/components/schemas/PaginationItems"
        - type: object
          properties:
            results:
              type: array
              items:
                $ref: "#/components/schemas/ExtendedProduct"
    ProductUpdateCost:
      type: object
      properties:
        porcentaje_aumento:
          type: number
          example: 25.0
        productos:
          type: array
          items:
            type: integer
            example: 1
    ProductUpdateCostResult:
      type: object
      properties:
        resultado:
          type: string
          example: "5 producto/s actualizado/s satisfactoriamente."
    BasicSale:
      type: object
      properties:
        producto:
          type: integer
          example: 1
        cantidad:
          type: number
          example: 1.0
        precio:
          type: number
          example: 1.0
    Sale:
      allOf:
        - $ref: "#/components/schemas/BasicSale"
        - type: object
          properties:
            fecha:
              type: string
              format: date
              example: "2018-03-20"
    ExtendedSale:
      allOf:
        - $ref: "#/components/schemas/Sale"
        - type: object
          properties:
            producto:
              $ref: "#/components/schemas/BasicProduct"
    PaginatedSales:
      allOf:
        - $ref: "#/components/schemas/PaginationItems"
        - type: object
          properties:
            results:
              type: array
              items:
                $ref: "#/components/schemas/ExtendedSale"
    SalesPerYear:
      type: object
      properties:
        sales_per_year:
          type: array
          items:
            type: number
          example: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
    SalesPerMonth:
      type: object
      properties:
        sales_per_month:
          type: array
          items:
            type: number
          example:
            [
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
            ]
    User:
      type: object
      properties:
        id:
          type: integer
          example: 1
        username:
          type: string
          example: admin
    UserCredentials:
      type: object
      properties:
        username:
          type: string
          example: admin
        password:
          type: string
          example: 1234
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: lmyc_jwt

security:
  - cookieAuth: []
